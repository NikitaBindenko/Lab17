template<class T>
class Node
{
public:
	T value;
	Node<T>* next;
	Node<T>* prev;

	Node() : value(0), next(NULL), prev(NULL) {};
	Node(T val) : value(val), next(NULL), prev(NULL) {}; //Head
	Node(Node<T>* last_node, T val) : value(val), next(NULL), prev(last_node) {};	//Push_Back
	Node(T val, Node<T>* first_node) : value(val), next(first_node), prev(NULL) {};	//Push_Front

	Node(Node& other)	//конструктор копий
	{
		this->value = other.value;
		//cout << "Copy Constructor" << endl;
	};

	//Operator Overload

	Node operator = (const Node& other)
	{
		value = other.value;
		//cout << "Assignment Operator" << endl;
		return *this;
	}
	friend ostream& operator<< (ostream& os, Node& n)
	{
		cout << n.value << endl;
		return os;
	}
};
